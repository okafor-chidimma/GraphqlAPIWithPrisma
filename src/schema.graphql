type Query {
  person: User!
  post: Post!
  user(id: ID!): User!
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createPost(post: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  createComment(comment: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}
enum MutationType {
  CREATED
  DELETED
  UPDATED
}
type Subscription {
  countSub: Int!
  commentSub(postId: ID!): CommentSubscriptionPayload!
  postSub: PostSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  email: String!
}
input UpdateUserInput {
  name: String
  email: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  postId: ID!
  authorId: ID!
}
input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  postData: Post!
}
type CommentSubscriptionPayload {
  mutation: MutationType!
  commentData: Comment!
}
